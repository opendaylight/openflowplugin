/*
 * (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.of.lib.msg;

import org.opendaylight.of.lib.IncompleteMessageException;
import org.opendaylight.of.lib.err.ErrorCode;
import org.opendaylight.of.lib.err.ErrorType;
import org.opendaylight.util.ByteUtils;

import static org.opendaylight.of.lib.CommonUtils.EOLI;
import static org.opendaylight.of.lib.CommonUtils.notNullIncompleteMsg;

/**
 * Represents an OpenFlow ERROR message; Since 1.0.
 * <p>
 * The {@link #getErrorType() type} value indicates the high-level type
 * of error. The {@link #getErrorCode() code} value is interpreted based on
 * the type. The {@link #getData() data} is variable in length and
 * interpreted based on the {@link #getErrorType() type} and
 * {@link #getErrorCode() code}.
 * Unless specified otherwise, the data field contains at least 64 bytes
 * of the failed request that caused the error message to be generated;
 * if the failed request is shorter than 64 bytes it should be the full
 * request without any padding.
 * <p>
 * As a convenience, the {@link #getErrorMessage()} method will return the
 * data interpreted as an ASCII string, if the message type is
 * {@code HELLO_FAILED}.
 * <p>
 * If the error message is in response to a specific message from the
 * controller, e.g.
 * {@link ErrorType#BAD_REQUEST BAD_REQUEST},
 * {@link ErrorType#BAD_ACTION BAD_ACTION},
 * {@link ErrorType#BAD_INSTRUCTION BAD_INSTRUCTION},
 * {@link ErrorType#BAD_MATCH BAD_MATCH}, or
 * {@link ErrorType#FLOW_MOD_FAILED FLOW_MOD_FAILED}, then the
 * {@code xid} field of the header must match that of the offending message.
 * <p>
 * {@code EPERM} error codes correspond to a permissions error generated by,
 * for example, an OpenFlow hypervisor interposing between a controller
 * and switch.
 *
 * @author Simon Hunt
 */
public class OfmError extends OpenflowMessage {

    ErrorType type;
    ErrorCode code;
    String errMsg;
    byte[] data;

    /**
     * Constructs an OpenFlow ERROR message.
     *
     * @param header the message header
     */
    OfmError(Header header) {
        super(header);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(super.toString());
        int len = sb.length();
        sb.replace(len-1, len, ",").append(type).append("/").append(code);
        if (type == ErrorType.HELLO_FAILED) {
            sb.append(",'").append(errMsg).append("'");
        } else {
            sb.append(",#dataBytes=").append(data == null ? 0 : data.length);
            sb.append(",").append(cause());
        }
        sb.append("}");
        return sb.toString();
    }

    @Override
    public String toDebugString() {
        StringBuilder sb = new StringBuilder(toString());
        if (data != null && data.length > 0)
            sb.append(EOLI).append("data = ").append(ByteUtils.hex(data));
        return sb.toString();
    }

    private String cause() {
        StringBuilder sb = new StringBuilder(OFM_CAUSE);
        if (data != null && data.length >= OFM_HEADER_LEN)
            sb.append(OpenflowMessage.decodeHeader(data));
        else
            sb.append(UNKNOWN);
        return sb.toString();
    }

    private static final String OFM_CAUSE = "OFM-cause:";
    private static final String UNKNOWN = "?";

    @Override
    public void validate() throws IncompleteMessageException {
        notNullIncompleteMsg(type, code);
    }

    /** Returns the high-level type of error; Since 1.0.
     *
     * @return the error type
     */
    public ErrorType getErrorType() {
        return type;
    }

    /** Returns the error code; Since 1.0. The code is interpreted based
     * on the {@link #getErrorType() type}.
     *
     * @return the error code
     */
    public ErrorCode getErrorCode() {
        return code;
    }

    /** Returns data associated with the error; Since 1.0.
     *
     * @return the associated data
     */
    public byte[] getData() {
        return data == null ? null : data.clone();
    }

    /**
     * Returns the associated error message; Since 1.0.
     * <p>
     * For errors of type {@code HELLO_FAILED}, the data bytes are interpreted
     * as an ASCII string, and this is returned. For all other error types, the
     * data bytes are assumed to be the beginning of the OpenFlow message that
     * caused the error; the header bytes of which are decoded and a string
     * representation returned.
     *
     * @return the error message
     */
    public String getErrorMessage() {
        return errMsg != null ? errMsg : cause();
    }
}
