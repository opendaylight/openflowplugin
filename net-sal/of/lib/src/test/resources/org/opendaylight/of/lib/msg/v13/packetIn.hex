### OpenFlow 1.3 PACKET IN message
## This example was constructed by converting a "real" 1.0 Packet-In message
## decoded with WireShark.
#
# openflow version (u8) = 1.3 (0x4)
#<0>#
04

# message type (u8) = OFPT_PACKET_IN(10)
0a

# message length (u16) = 319
01 3f

# transaction id (u32) = 0
00 00 00 00

### Message Specific Payload
# buffer id (u32) = NO_BUFFER
#<8>#
ff ff ff ff

### Note: the following value (273) doesn't make sense to us, since
###       the LLDP frame appears to be complete, and yet is just
###       261 bytes in length...
# full length of frame (u16) = 273
01 11

# reason (u8) = ACTION (1)
01

# ID of the table that was looked up (u8) = 7
07

# cookie (u64) = 0xcafe
#<16>#
0000 0000 0000 cafe

### MATCH - reflects packet meta data
# See section A.4.1 (v1.3.1 spec) for more details
#<24>#

## Match Header
# Type (u16) = OXM (0x1)
00 01
# Length (u16) = 32 (excludes padding)
00 20

## Match Field - In Port
# Basic, IN_PORT(0<<1)+M, len
#<28>#
  8000   00               04
# In Port
  00 00 00 30

## Match Field - Ethernet Destination Address
# Basic, ETH_DST(3<<1)+M, len
#<36>#
  8000   06               06
# Destination MAC
  01 80 c2 00 00 0e

## Match Field - Ethernet Source Address
# Basic, ETH_SRC(4<<1)+M, len
#<46>#
  8000   08               06
# Source MAC
  08 2e 5f 69 c4 7b

## Zero-Filled Padding to bring total structure length to multiple of 8
## Match struct length is 32; add 0 to bring it to 32



# pad (u8 x 2)
#<56>#
00 00

########### frame data (u8 x N)
### This is an LLDP packet
# dest MAC
#<58>#
01 80 c2 00 00 0e

# src MAC (station's address)
#<64>#
08 2e 5f 69 c4 7b

# ethertype = LLDP
#<70>#
88 cc

# Chassis ID TLV (7/9b = type:1, len:7)
#<72>#
02 07
## Chassis ID
04 08 2e 5f 69 c4 40

# Port ID TLV (7/9b = type:2, len:2)
#<81>#
04 02
## Port ID = 1845 (0x735)
07 35

# Time to live TLV (7/9b = type:3, len:2)
#<85>#
06 02
## Time to Live = 120
00 78

## Optional TLVs start here
# TLV (7/9b = type:4, len:1)
#<89>#
08 01
# data
35

# TLV (7/9b = type:5, len:14)
#<92>#
0a 0e
# data
48 50 20 53 74 61 63 6b
20 45 33 38 30 30

# TLV (7/9b = type:6, len:157)
#<108>#
0c 9d
# data
48 50 20 4a 39 35 38 37
41 20 33 38 30 30 2d 32
34 47 2d 50 6f 45 2b 2d
32 58 47 20 53 77 69 74

63 68 2c 20 72 65 76 69
73 69 6f 6e 20 4b 41 2e
31 35 2e 31 30 2e 30 30
30 34 2c 20 52 4f 4d 20

4b 41 2e 31 35 2e 30 39
20 28 2f 77 73 2f 73 77
62 75 69 6c 64 6d 2f 72
65 6c 5f 69 72 76 69 6e

65 5f 71 61 6f 66 66 2f
63 6f 64 65 2f 62 75 69
6c 64 2f 74 61 6d 28 73
77 62 75 69 6c 64 6d 5f

72 65 6c 5f 69 72 76 69
6e 65 5f 71 61 6f 66 66
5f 72 65 6c 5f 69 72 76
69 6e 65 29 29

# TLV (7/9b = type:7, len:4)
#<267>#
0e 04
# data
00 14 00 04

# TLV (7/9b = type:8, len:14)
#<273>#
10 0e
# data
07 06 08 2e 5f 69 c4 40
02 00 00 00 00 00

#TLV (7/9b = type:127, len:6)
#<289>#
fe 06
# data
00 80 c2 01 00 0a

#TLV (7/9b = type:127, len:9)
#<297>#
fe 09
# data
00 12 0f 01 03 6c 01 00 1e

#TLV (7/9b = type:127, len:7)
#<308>#
fe 07
# data
00 12 0f 02 07 01 01

# TLV (7/9b = type:0, len:0)
#<317>#
00 00

#<319>#
## We are done ##
