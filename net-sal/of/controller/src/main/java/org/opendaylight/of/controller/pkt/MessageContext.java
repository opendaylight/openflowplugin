/*
 * (c) Copyright 2013,2014 Hewlett-Packard Development Company, L.P.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */


package org.opendaylight.of.controller.pkt;

import org.opendaylight.of.controller.MessageEvent;
import org.opendaylight.of.lib.ProtocolVersion;
import org.opendaylight.of.lib.msg.OfmPacketIn;
import org.opendaylight.of.lib.msg.OfmPacketOut;
import org.opendaylight.util.packet.Packet;
import org.opendaylight.util.packet.ProtocolId;

import java.util.List;

/**
 * Provides a context when processing a specific OpenFlow <em>PacketIn</em>
 * message. The source message event, (available via {@link #srcEvent()}),
 * contains the {@link #getPacketIn() PacketIn} message.
 * The {@link PacketSequencer} will decode the packet to determine the
 * {@link #getProtocols() protocols} used. The decoded packet model is
 * available via {@link #decodedPacket()}.
 * <p>
 * When the context is created, a mutable <em>PacketOut</em> message is also
 * constructed and kept in the context. Note that the protocol version,
 * transaction ID (xid), ingress port, and buffer ID of the
 * <em>PacketIn</em> message are copied to the <em>PacketOut</em> message.
 * {@link SequencedPacketListener}s can manipulate the <em>PacketOut</em>
 * message via the {@link PacketOut} API.
 * <p>
 * Packet listeners (in the {@link SequencedPacketListenerRole#ADVISOR ADVISOR} role)
 * may add {@link Hint}s to the message context to help listeners further
 * downstream make decisions.
 * <p>
 * Once a packet listener (in the {@link SequencedPacketListenerRole#DIRECTOR DIRECTOR}
 * role) has determined that the <em>PacketOut</em> message is ready to send
 * back to the datapath, it indicates this to the {@link PacketSequencer} by
 * calling {@link PacketOut#send() send()} on the <em>PacketOut</em> API.
 * The sequencer will then forward the <em>PacketOut</em> message
 * to the controller for sending.
 * <p>
 * Packet listeners downstream of the <em>DIRECTOR</em> that caused the
 * <em>PacketOut</em> to be sent, still get to see the message context, and
 * can therefore observe what transpired.
 *
 * @author Simon Hunt
 * @author Scott Simes
 * @author Thomas Vachuska
 */
public interface MessageContext {

    /**
     * Returns the associated <em>PacketIn</em> message event.
     *
     * @return the <em>PacketIn</em> message event
     */
    MessageEvent srcEvent();

    /**
     * Returns the protocol version of the associated <em>PacketIn</em>
     * message event.
     *
     * @return the protocol version
     */
    ProtocolVersion getVersion();

    /**
     * Convenience method that returns the <em>PacketIn</em> message from
     * the message event.
     *
     * @return the <em>PacketIn</em> message
     */
    OfmPacketIn getPacketIn();

    /**
     * Returns the decoded packet data generated by the Network Packet Library
     * facility. This will be null if there is no packet data associated
     * with the <em>PacketIn</em> message.
     *
     * @return the decoded packet data
     */
    Packet decodedPacket();

    /**
     * Returns an ordered list of {@link ProtocolId protocols} decoded
     * from the packet. The protocols are ordered from outermost to innermost
     * layer. This will be null if there is no packet data associated
     * with the <em>PacketIn</em> message.
     *
     * @return the list of protocols
     */
    List<ProtocolId> getProtocols();

    /**
     * Returns the API for manipulating the <em>PacketOut</em> message.
     *
     * @return the packet out API
     */
    PacketOut packetOut();

    /**
     * Returns the <em>PacketOut</em> message that was sent back to the
     * source datapath. Note that this method will return null if the
     * <em>PacketOut</em> message has not yet been sent.
     *
     * @return the <em>PacketOut</em> message
     */
    OfmPacketOut getCompletedPacketOut();

    /**
     * Adds a hint to the context.
     *
     * @param hint the hint to be added
     * @return self, for chaining
     * @throws NullPointerException if hint is null
     */
    MessageContext addHint(Hint hint);

    /**
     * Returns the hints contained in this context, in the order they were
     * added by the <em>Advisors</em>.
     *
     * @return the hints
     */
    List<Hint> getHints();

    /**
     * Returns true if the associated message event has already been handled.
     * That is, either blocked or sent.
     *
     * @return true if handled; false otherwise
     */
    boolean isHandled();

    /**
     * Returns true if response (<em>packet-out</em> message) to the associated
     * message event has been blocked.
     *
     * @return true if blocked; false otherwise
     */
    boolean isBlocked();

    /**
     * Returns true if response (<em>packet-out</em> message) to the associated
     * message event has been sent.
     *
     * @return true if sent; false otherwise
     */
    boolean isSent();

    /**
     * Returns true if the associated packet has been determined to be a
     * diagnostic test packet.
     *
     * @return true if a diagnostic test packet; false otherwise
     */
    boolean isTestPacket();

    /**
     * Returns true if the associated packet is not a test packet, and has
     * not yet been blocked or sent and thus continues to require processing.
     *
     * @return true if not a test packet, not blocked, and not sent
     */
    boolean requiresProcessing();

    /**
     * This flag is set in the unlikely event that the packet sequencer
     * failed to send the <em>PacketOut</em> message via the controller.
     *
     * @return true if an error occurred during send
     */
    boolean failedToSend();

    /**
     * Returns a multi-line string representation of this message context,
     * suitable for debugging.
     *
     * @return a multi-line string representation
     */
    String toDebugString();

}
