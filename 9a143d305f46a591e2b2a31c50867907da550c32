{
  "comments": [
    {
      "key": {
        "uuid": "ba1f61a0_3d9c070f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-09-07T13:25:31Z",
      "side": 1,
      "message": "As per my list post, perhaps it would be best to clarify that this:\n\n* does NOT fix Bug 9038\n* DOES fix Bug 9070\n* remove Bug 9071 here, that only creates more confusion",
      "revId": "9a143d305f46a591e2b2a31c50867907da550c32",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_aab27691",
        "filename": "openflowplugin-common/src/main/java/org/opendaylight/openflowplugin/common/txchain/TransactionChainManager.java",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 65
      },
      "writtenOn": "2017-09-05T23:40:19Z",
      "side": 1,
      "message": "looks like deactivateTransactionManager() and onTransactionChainFailed() can cause race condition here, given that onTransactionChainFailed and future callback in deactivateTransactionManager will be called in separate thread. so there is a possibility that onTransactionChainFailed  may end up creating a new transaction chain, which won\u0027t be used by anyone, given that device is disconnected (or moved to slave)",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "9a143d305f46a591e2b2a31c50867907da550c32",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_25635743",
        "filename": "openflowplugin-common/src/main/java/org/opendaylight/openflowplugin/common/txchain/TransactionChainManager.java",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 5280
      },
      "writtenOn": "2017-09-06T06:24:01Z",
      "side": 1,
      "message": "More o less the logic here is the same as before. After transaction failed event we recreate a new tChain. The only stuff here is that method will check if the txChain in failed event is still the same txChain we created. If not ignoring txChain was recreated somewhere else. If it is the same it will be recreated here. So long we keep it synchronized and even if there was deactivate call before the method do practically nothing because the chain is already null or changed.",
      "parentUuid": "ba1f61a0_aab27691",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "9a143d305f46a591e2b2a31c50867907da550c32",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_1a9dc966",
        "filename": "openflowplugin-common/src/main/java/org/opendaylight/openflowplugin/common/txchain/TransactionChainManager.java",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 65
      },
      "writtenOn": "2017-09-07T08:42:57Z",
      "side": 1,
      "message": "Given that TransactionChainManager is initialized per device, in what scenario this will happen? --\u003e \"If not ignoring txChain was recreated somewhere else\"",
      "parentUuid": "ba1f61a0_25635743",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "9a143d305f46a591e2b2a31c50867907da550c32",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_09e2a52e",
        "filename": "openflowplugin-common/src/main/java/org/opendaylight/openflowplugin/common/txchain/TransactionChainManager.java",
        "patchSetId": 5
      },
      "lineNbr": 271,
      "author": {
        "id": 5280
      },
      "writtenOn": "2017-09-08T07:13:56Z",
      "side": 1,
      "message": "(I was reading my comment and I don\u0027t fully understood what I wrote here :))\n\nWhat I meant is, if the event comes here it could be late and already dropped/closed by another event like closing/deactivating. It is just for safety to not to close a chain which we do not working with. Or, I don\u0027t know if it is possible, but won\u0027t rely on another piece of code which I do not know :), it may come this event for another chain from controller which we also should not close here.\n\nAnyway after Michael testing still shows IllegalState, so it is somewhere closing chain improperly. So I try to investigate.",
      "parentUuid": "ba1f61a0_1a9dc966",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "9a143d305f46a591e2b2a31c50867907da550c32",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}