/*
 * Copyright (c) 2013 Pantheon Technologies s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.openflowjava.protocol.impl.util;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.UnpooledByteBufAllocator;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.opendaylight.openflowjava.protocol.api.extensibility.OFSerializer;
import org.opendaylight.openflowjava.protocol.api.extensibility.SerializerRegistry;
import org.opendaylight.openflowjava.protocol.api.keys.MessageTypeKey;
import org.opendaylight.openflowjava.protocol.api.util.EncodeConstants;
import org.opendaylight.openflowjava.protocol.impl.serialization.SerializerRegistryImpl;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.Dscp;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.Ipv4Address;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.Ipv6Address;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.Ipv6FlowLabel;
import org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.yang.types.rev130715.MacAddress;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.common.types.rev130731.EtherType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.common.types.rev130731.Ipv6ExthdrFlags;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.common.types.rev130731.PortNumber;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.ArpOp;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.ArpSha;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.ArpSpa;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.ArpTha;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.ArpTpa;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.EthDst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.EthSrc;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.EthType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Icmpv4Code;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Icmpv4Type;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Icmpv6Code;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Icmpv6Type;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.InPhyPort;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.InPort;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.IpDscp;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.IpEcn;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.IpProto;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv4Dst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv4Src;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6Dst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6Exthdr;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6Flabel;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6NdSll;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6NdTarget;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6NdTll;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Ipv6Src;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.Metadata;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.MplsBos;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.MplsLabel;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.MplsTc;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.OpenflowBasicClass;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.OxmMatchType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.PacketType;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.PbbIsid;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.SctpDst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.SctpSrc;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.TcpDst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.TcpSrc;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.TunnelId;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.UdpDst;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.UdpSrc;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.VlanPcp;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.VlanVid;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntryBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ArpOpCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ArpShaCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ArpSpaCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ArpThaCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ArpTpaCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.EthDstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.EthSrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.EthTypeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Icmpv4CodeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Icmpv4TypeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Icmpv6CodeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Icmpv6TypeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.InPhyPortCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.InPortCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.IpDscpCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.IpEcnCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.IpProtoCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv4DstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv4SrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6DstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6ExthdrCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6FlabelCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6NdSllCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6NdTargetCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6NdTllCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.Ipv6SrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.MetadataCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.MplsBosCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.MplsLabelCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.MplsTcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.PacketTypeCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.PbbIsidCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.SctpDstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.SctpSrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.TcpDstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.TcpSrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.TunnelIdCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.UdpDstCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.UdpSrcCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.VlanPcpCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.VlanVidCaseBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.arp.op._case.ArpOpBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.arp.sha._case.ArpShaBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.arp.spa._case.ArpSpaBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.arp.tha._case.ArpThaBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.arp.tpa._case.ArpTpaBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.eth.dst._case.EthDstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.eth.src._case.EthSrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.eth.type._case.EthTypeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.icmpv4.code._case.Icmpv4CodeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.icmpv4.type._case.Icmpv4TypeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.icmpv6.code._case.Icmpv6CodeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.icmpv6.type._case.Icmpv6TypeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.in.phy.port._case.InPhyPortBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.in.port._case.InPortBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ip.dscp._case.IpDscpBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ip.ecn._case.IpEcnBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ip.proto._case.IpProtoBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv4.dst._case.Ipv4DstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv4.src._case.Ipv4SrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.dst._case.Ipv6DstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.exthdr._case.Ipv6ExthdrBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.flabel._case.Ipv6FlabelBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.nd.sll._case.Ipv6NdSllBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.nd.target._case.Ipv6NdTargetBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.nd.tll._case.Ipv6NdTllBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.ipv6.src._case.Ipv6SrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.metadata._case.MetadataBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.mpls.bos._case.MplsBosBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.mpls.label._case.MplsLabelBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.mpls.tc._case.MplsTcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.packet.type._case.PacketTypeBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.pbb.isid._case.PbbIsidBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.sctp.dst._case.SctpDstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.sctp.src._case.SctpSrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.tcp.dst._case.TcpDstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.tcp.src._case.TcpSrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.tunnel.id._case.TunnelIdBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.udp.dst._case.UdpDstBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.udp.src._case.UdpSrcBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.vlan.pcp._case.VlanPcpBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.entry.value.grouping.match.entry.value.vlan.vid._case.VlanVidBuilder;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.grouping.Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225.match.grouping.MatchBuilder;

/**
 * Unit tests for OF13MatchSerializer02.
 *
 * @author michal.polkorab
 */
public class OF13MatchSerializer02Test {

    private SerializerRegistry registry;
    private OFSerializer<Match> matchSerializer;

    /**
     * Initializes serializer table and stores correct factory in field.
     */
    @Before
    public void startUp() {
        registry = new SerializerRegistryImpl();
        registry.init();
        matchSerializer = registry.getSerializer(
                new MessageTypeKey<>(EncodeConstants.OF13_VERSION_ID, Match.class));
    }

    /**
     * Testing serialization of match.
     */
    @Test
    public void testEmptyMatch() {
        MatchBuilder builder = new MatchBuilder();
        builder.setType(OxmMatchType.class);
        Match match = builder.build();

        ByteBuf out = UnpooledByteBufAllocator.DEFAULT.buffer();
        matchSerializer.serialize(match, out);

        Assert.assertEquals("Wrong match type", 1, out.readUnsignedShort());
        Assert.assertEquals("Wrong match length", 4, out.readUnsignedShort());
        Assert.assertTrue("Wrong padding", out.readableBytes() == 4);
    }

    /**
     * Testing serialization of match.
     */
    @Test
    public void test() {
        MatchBuilder builder = new MatchBuilder();
        builder.setType(OxmMatchType.class);
        final List<MatchEntry> entries = new ArrayList<>();
        MatchEntryBuilder entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(InPort.class);
        entryBuilder.setHasMask(false);
        InPortCaseBuilder inPortCaseBuilder = new InPortCaseBuilder();
        InPortBuilder inPortBuilder = new InPortBuilder();
        inPortBuilder.setPortNumber(new PortNumber(42L));
        inPortCaseBuilder.setInPort(inPortBuilder.build());
        entryBuilder.setMatchEntryValue(inPortCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(InPhyPort.class);
        entryBuilder.setHasMask(false);
        InPhyPortCaseBuilder inPhyPortCaseBuilder = new InPhyPortCaseBuilder();
        InPhyPortBuilder inPhyPortBuilder = new InPhyPortBuilder();
        inPhyPortBuilder.setPortNumber(new PortNumber(43L));
        inPhyPortCaseBuilder.setInPhyPort(inPhyPortBuilder.build());
        entryBuilder.setMatchEntryValue(inPhyPortCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Metadata.class);
        entryBuilder.setHasMask(true);
        MetadataCaseBuilder metaCaseBuilder = new MetadataCaseBuilder();
        MetadataBuilder metadataBuilder = new MetadataBuilder();
        metadataBuilder.setMetadata(new byte[]{0,0,0,0,0,0,0,1});
        metadataBuilder.setMask(new byte[]{0,0,0,0,0,0,0,2});
        metaCaseBuilder.setMetadata(metadataBuilder.build());
        entryBuilder.setMatchEntryValue(metaCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(EthDst.class);
        entryBuilder.setHasMask(true);
        EthDstCaseBuilder ethDstCaseBuilder = new EthDstCaseBuilder();
        EthDstBuilder ethDstBuilder = new EthDstBuilder();
        ethDstBuilder.setMacAddress(new MacAddress("01:00:03:00:00:06"));
        ethDstBuilder.setMask(new byte[]{0,0,0,0,0,5});
        ethDstCaseBuilder.setEthDst(ethDstBuilder.build());
        entryBuilder.setMatchEntryValue(ethDstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(EthSrc.class);
        entryBuilder.setHasMask(true);
        EthSrcCaseBuilder ethSrcCaseBuilder = new EthSrcCaseBuilder();
        EthSrcBuilder ethSrcBuilder = new EthSrcBuilder();
        ethSrcBuilder.setMacAddress(new MacAddress("04:00:02:00:00:08"));
        ethSrcBuilder.setMask(new byte[]{0,0,0,0,0,2});
        ethSrcCaseBuilder.setEthSrc(ethSrcBuilder.build());
        entryBuilder.setMatchEntryValue(ethSrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(EthType.class);
        entryBuilder.setHasMask(false);
        EthTypeCaseBuilder ethTypeCaseBuilder = new EthTypeCaseBuilder();
        EthTypeBuilder ethTypeBuilder = new EthTypeBuilder();
        ethTypeBuilder.setEthType(new EtherType(46));
        ethTypeCaseBuilder.setEthType(ethTypeBuilder.build());
        entryBuilder.setMatchEntryValue(ethTypeCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(VlanVid.class);
        entryBuilder.setHasMask(true);
        final VlanVidCaseBuilder vlanVidCaseBuilder = new VlanVidCaseBuilder();
        VlanVidBuilder vlanVidBuilder = new VlanVidBuilder();
        vlanVidBuilder.setVlanVid(45);
        vlanVidBuilder.setCfiBit(true);
        vlanVidBuilder.setMask(new byte[]{0,9});
        vlanVidCaseBuilder.setVlanVid(vlanVidBuilder.build());
        entryBuilder.setMatchEntryValue(vlanVidCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(VlanPcp.class);
        entryBuilder.setHasMask(false);
        VlanPcpCaseBuilder vlanPcpCaseBuilder = new VlanPcpCaseBuilder();
        VlanPcpBuilder vlanPcpBuilder = new VlanPcpBuilder();
        vlanPcpBuilder.setVlanPcp((short) 14);
        vlanPcpCaseBuilder.setVlanPcp(vlanPcpBuilder.build());
        entryBuilder.setMatchEntryValue(vlanPcpCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(IpDscp.class);
        entryBuilder.setHasMask(false);
        IpDscpCaseBuilder ipDscpCaseBuilder = new IpDscpCaseBuilder();
        IpDscpBuilder ipDscpBuilder = new IpDscpBuilder();
        ipDscpBuilder.setDscp(new Dscp((short) 48));
        ipDscpCaseBuilder.setIpDscp(ipDscpBuilder.build());
        entryBuilder.setMatchEntryValue(ipDscpCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(IpEcn.class);
        entryBuilder.setHasMask(false);
        IpEcnCaseBuilder ipEcnCaseBuilder = new IpEcnCaseBuilder();
        IpEcnBuilder ipEcnBuilder = new IpEcnBuilder();
        ipEcnBuilder.setEcn((short) 49);
        ipEcnCaseBuilder.setIpEcn(ipEcnBuilder.build());
        entryBuilder.setMatchEntryValue(ipEcnCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(IpProto.class);
        entryBuilder.setHasMask(false);
        IpProtoCaseBuilder ipProtoCaseBuilder = new IpProtoCaseBuilder();
        IpProtoBuilder ipProtoBuilder = new IpProtoBuilder();
        ipProtoBuilder.setProtocolNumber((short) 50);
        ipProtoCaseBuilder.setIpProto(ipProtoBuilder.build());
        entryBuilder.setMatchEntryValue(ipProtoCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv4Src.class);
        entryBuilder.setHasMask(true);
        Ipv4SrcCaseBuilder ipv4SrcCaseBuilder = new Ipv4SrcCaseBuilder();
        Ipv4SrcBuilder ipv4SrcBuilder = new Ipv4SrcBuilder();
        ipv4SrcBuilder.setIpv4Address(new Ipv4Address("10.0.0.1"));
        ipv4SrcBuilder.setMask(new byte[]{0,0,0,14});
        ipv4SrcCaseBuilder.setIpv4Src(ipv4SrcBuilder.build());
        entryBuilder.setMatchEntryValue(ipv4SrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv4Dst.class);
        entryBuilder.setHasMask(true);
        Ipv4DstCaseBuilder ipv4DstCaseBuilder = new Ipv4DstCaseBuilder();
        Ipv4DstBuilder ipv4DstBuilder = new Ipv4DstBuilder();
        ipv4DstBuilder.setIpv4Address(new Ipv4Address("10.0.0.2"));
        ipv4DstBuilder.setMask(new byte[]{0,0,0,15});
        ipv4DstCaseBuilder.setIpv4Dst(ipv4DstBuilder.build());
        entryBuilder.setMatchEntryValue(ipv4DstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(TcpSrc.class);
        entryBuilder.setHasMask(false);
        TcpSrcCaseBuilder tcpSrcCaseBuilder = new TcpSrcCaseBuilder();
        TcpSrcBuilder tcpSrcBuilder = new TcpSrcBuilder();
        tcpSrcBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6653));
        tcpSrcCaseBuilder.setTcpSrc(tcpSrcBuilder.build());
        entryBuilder.setMatchEntryValue(tcpSrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(TcpDst.class);
        entryBuilder.setHasMask(false);
        TcpDstCaseBuilder tcpDstCaseBuilder = new TcpDstCaseBuilder();
        TcpDstBuilder tcpDstBuilder = new TcpDstBuilder();
        tcpDstBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6654));
        tcpDstCaseBuilder.setTcpDst(tcpDstBuilder.build());
        entryBuilder.setMatchEntryValue(tcpDstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(UdpSrc.class);
        entryBuilder.setHasMask(false);
        UdpSrcCaseBuilder udpSrcCaseBuilder = new UdpSrcCaseBuilder();
        UdpSrcBuilder udpSrcBuilder = new UdpSrcBuilder();
        udpSrcBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6655));
        udpSrcCaseBuilder.setUdpSrc(udpSrcBuilder.build());
        entryBuilder.setMatchEntryValue(udpSrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(UdpDst.class);
        entryBuilder.setHasMask(false);
        UdpDstCaseBuilder udpDstCaseBuilder = new UdpDstCaseBuilder();
        UdpDstBuilder udpDstBuilder = new UdpDstBuilder();
        udpDstBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6656));
        udpDstCaseBuilder.setUdpDst(udpDstBuilder.build());
        entryBuilder.setMatchEntryValue(udpDstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(SctpSrc.class);
        entryBuilder.setHasMask(false);
        SctpSrcCaseBuilder sctpSrcCaseBuilder = new SctpSrcCaseBuilder();
        SctpSrcBuilder sctpSrcBuilder = new SctpSrcBuilder();
        sctpSrcBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6657));
        sctpSrcCaseBuilder.setSctpSrc(sctpSrcBuilder.build());
        entryBuilder.setMatchEntryValue(sctpSrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(SctpDst.class);
        entryBuilder.setHasMask(false);
        SctpDstCaseBuilder sctpDstCaseBuilder = new SctpDstCaseBuilder();
        SctpDstBuilder sctpDstBuilder = new SctpDstBuilder();
        sctpDstBuilder.setPort(new org.opendaylight.yang.gen.v1.urn.ietf.params
                .xml.ns.yang.ietf.inet.types.rev130715.PortNumber(6658));
        sctpDstCaseBuilder.setSctpDst(sctpDstBuilder.build());
        entryBuilder.setMatchEntryValue(sctpDstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Icmpv4Type.class);
        entryBuilder.setHasMask(false);
        Icmpv4TypeCaseBuilder icmpv4TypeCaseBuilder = new Icmpv4TypeCaseBuilder();
        Icmpv4TypeBuilder icmpv4TypeBuilder = new Icmpv4TypeBuilder();
        icmpv4TypeBuilder.setIcmpv4Type((short) 51);
        icmpv4TypeCaseBuilder.setIcmpv4Type(icmpv4TypeBuilder.build());
        entryBuilder.setMatchEntryValue(icmpv4TypeCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Icmpv4Code.class);
        entryBuilder.setHasMask(false);
        Icmpv4CodeCaseBuilder icmpv4CodeCaseBuilder = new Icmpv4CodeCaseBuilder();
        Icmpv4CodeBuilder icmpv4CodeBuilder = new Icmpv4CodeBuilder();
        icmpv4CodeBuilder.setIcmpv4Code((short) 52);
        icmpv4CodeCaseBuilder.setIcmpv4Code(icmpv4CodeBuilder.build());
        entryBuilder.setMatchEntryValue(icmpv4CodeCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(ArpOp.class);
        entryBuilder.setHasMask(false);
        ArpOpCaseBuilder arpOpCaseBuilder = new ArpOpCaseBuilder();
        ArpOpBuilder arpOpBuilder = new ArpOpBuilder();
        arpOpBuilder.setOpCode(53);
        arpOpCaseBuilder.setArpOp(arpOpBuilder.build());
        entryBuilder.setMatchEntryValue(arpOpCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(ArpSpa.class);
        entryBuilder.setHasMask(true);
        ArpSpaCaseBuilder arpSpaCaseBuilder = new ArpSpaCaseBuilder();
        ArpSpaBuilder arpSpaBuilder = new ArpSpaBuilder();
        arpSpaBuilder.setIpv4Address(new Ipv4Address("10.0.0.4"));
        arpSpaBuilder.setMask(new byte[]{0,0,0,16});
        arpSpaCaseBuilder.setArpSpa(arpSpaBuilder.build());
        entryBuilder.setMatchEntryValue(arpSpaCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(ArpTpa.class);
        entryBuilder.setHasMask(true);
        ArpTpaCaseBuilder arpTpaCaseBuilder = new ArpTpaCaseBuilder();
        ArpTpaBuilder arpTpaBuilder = new ArpTpaBuilder();
        arpTpaBuilder.setIpv4Address(new Ipv4Address("10.0.0.5"));
        arpTpaBuilder.setMask(new byte[]{0,0,0,17});
        arpTpaCaseBuilder.setArpTpa(arpTpaBuilder.build());
        entryBuilder.setMatchEntryValue(arpTpaCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(ArpSha.class);
        entryBuilder.setHasMask(true);
        ArpShaCaseBuilder arpShaCaseBuilder = new ArpShaCaseBuilder();
        ArpShaBuilder arpShaBuilder = new ArpShaBuilder();
        arpShaBuilder.setMacAddress(new MacAddress("00:01:02:03:04:05"));
        arpShaBuilder.setMask(new byte[]{0,0,4,0,0,6});
        arpShaCaseBuilder.setArpSha(arpShaBuilder.build());
        entryBuilder.setMatchEntryValue(arpShaCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(ArpTha.class);
        entryBuilder.setHasMask(true);
        ArpThaCaseBuilder arpThaCaseBuilder = new ArpThaCaseBuilder();
        ArpThaBuilder arpThaBuilder = new ArpThaBuilder();
        arpThaBuilder.setMacAddress(new MacAddress("00:00:00:00:00:03"));
        arpThaBuilder.setMask(new byte[]{0,0,6,0,0,4});
        arpThaCaseBuilder.setArpTha(arpThaBuilder.build());
        entryBuilder.setMatchEntryValue(arpThaCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6Src.class);
        entryBuilder.setHasMask(true);
        Ipv6SrcCaseBuilder ipv6SrcCaseBuilder = new Ipv6SrcCaseBuilder();
        Ipv6SrcBuilder ipv6SrcBuilder = new Ipv6SrcBuilder();
        ipv6SrcBuilder.setIpv6Address(new Ipv6Address("0:0:0:0:0:0:0:1"));
        ipv6SrcBuilder.setMask(new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1});
        ipv6SrcCaseBuilder.setIpv6Src(ipv6SrcBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6SrcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6Dst.class);
        entryBuilder.setHasMask(true);
        Ipv6DstCaseBuilder ipv6DstCaseBuilder = new Ipv6DstCaseBuilder();
        Ipv6DstBuilder ipv6DstBuilder = new Ipv6DstBuilder();
        ipv6DstBuilder.setIpv6Address(new Ipv6Address("0:0:1:0:1:0:0:1"));
        ipv6DstBuilder.setMask(new byte[]{0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1});
        ipv6DstCaseBuilder.setIpv6Dst(ipv6DstBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6DstCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6Flabel.class);
        entryBuilder.setHasMask(false);
        Ipv6FlabelCaseBuilder ipv6FlabelCaseBuilder = new Ipv6FlabelCaseBuilder();
        Ipv6FlabelBuilder ipv6FlabelBuilder = new Ipv6FlabelBuilder();
        ipv6FlabelBuilder.setIpv6Flabel(new Ipv6FlowLabel(58L));
        ipv6FlabelCaseBuilder.setIpv6Flabel(ipv6FlabelBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6FlabelCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Icmpv6Type.class);
        entryBuilder.setHasMask(false);
        Icmpv6TypeCaseBuilder icmpv6TypeCaseBuilder = new Icmpv6TypeCaseBuilder();
        Icmpv6TypeBuilder icmpv6TypeBuilder = new Icmpv6TypeBuilder();
        icmpv6TypeBuilder.setIcmpv6Type((short) 59);
        icmpv6TypeCaseBuilder.setIcmpv6Type(icmpv6TypeBuilder.build());
        entryBuilder.setMatchEntryValue(icmpv6TypeCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Icmpv6Code.class);
        entryBuilder.setHasMask(false);
        Icmpv6CodeCaseBuilder icmpv6CodeCaseBuilder = new Icmpv6CodeCaseBuilder();
        Icmpv6CodeBuilder icmpv6CodeBuilder = new Icmpv6CodeBuilder();
        icmpv6CodeBuilder.setIcmpv6Code((short) 60);
        icmpv6CodeCaseBuilder.setIcmpv6Code(icmpv6CodeBuilder.build());
        entryBuilder.setMatchEntryValue(icmpv6CodeCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6NdTarget.class);
        entryBuilder.setHasMask(false);
        Ipv6NdTargetCaseBuilder ipv6NdTargetCaseBuilder = new Ipv6NdTargetCaseBuilder();
        Ipv6NdTargetBuilder ipv6NdTargetBuilder = new Ipv6NdTargetBuilder();
        ipv6NdTargetBuilder.setIpv6Address(new Ipv6Address("F:0:0::0:0:0:1"));
        ipv6NdTargetCaseBuilder.setIpv6NdTarget(ipv6NdTargetBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6NdTargetCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6NdSll.class);
        entryBuilder.setHasMask(false);
        Ipv6NdSllCaseBuilder ipv6NdSllCaseBuilder = new Ipv6NdSllCaseBuilder();
        Ipv6NdSllBuilder ipv6NdSllBuilder = new Ipv6NdSllBuilder();
        ipv6NdSllBuilder.setMacAddress(new MacAddress("01:00:03:00:00:06"));
        ipv6NdSllCaseBuilder.setIpv6NdSll(ipv6NdSllBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6NdSllCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6NdTll.class);
        entryBuilder.setHasMask(false);
        Ipv6NdTllCaseBuilder ipv6NdTllCaseBuilder = new Ipv6NdTllCaseBuilder();
        Ipv6NdTllBuilder ipv6NdTllBuilder = new Ipv6NdTllBuilder();
        ipv6NdTllBuilder.setMacAddress(new MacAddress("04:00:02:00:00:08"));
        ipv6NdTllCaseBuilder.setIpv6NdTll(ipv6NdTllBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6NdTllCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(MplsLabel.class);
        entryBuilder.setHasMask(false);
        MplsLabelCaseBuilder mplsLabelCaseBuilder = new MplsLabelCaseBuilder();
        MplsLabelBuilder mplsLabelBuilder = new MplsLabelBuilder();
        mplsLabelBuilder.setMplsLabel(61L);
        mplsLabelCaseBuilder.setMplsLabel(mplsLabelBuilder.build());
        entryBuilder.setMatchEntryValue(mplsLabelCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(MplsTc.class);
        entryBuilder.setHasMask(false);
        MplsTcCaseBuilder mplsTcCaseBuilder = new MplsTcCaseBuilder();
        MplsTcBuilder mplsTcBuilder = new MplsTcBuilder();
        mplsTcBuilder.setTc((short) 62);
        mplsTcCaseBuilder.setMplsTc(mplsTcBuilder.build());
        entryBuilder.setMatchEntryValue(mplsTcCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(MplsBos.class);
        entryBuilder.setHasMask(false);
        MplsBosCaseBuilder mplsBosCaseBuilder = new MplsBosCaseBuilder();
        MplsBosBuilder mplsBosBuilder = new MplsBosBuilder();
        mplsBosBuilder.setBos(true);
        mplsBosCaseBuilder.setMplsBos(mplsBosBuilder.build());
        entryBuilder.setMatchEntryValue(mplsBosCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(PbbIsid.class);
        entryBuilder.setHasMask(true);
        PbbIsidCaseBuilder pbbIsidCaseBuilder = new PbbIsidCaseBuilder();
        PbbIsidBuilder pbbIsidBuilder = new PbbIsidBuilder();
        pbbIsidBuilder.setIsid(64L);
        pbbIsidBuilder.setMask(new byte[]{0,1,2});
        pbbIsidCaseBuilder.setPbbIsid(pbbIsidBuilder.build());
        entryBuilder.setMatchEntryValue(pbbIsidCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(TunnelId.class);
        entryBuilder.setHasMask(true);
        TunnelIdCaseBuilder tunnelIdCaseBuilder = new TunnelIdCaseBuilder();
        TunnelIdBuilder tunnelIdBuilder = new TunnelIdBuilder();
        tunnelIdBuilder.setTunnelId(new byte[]{0,0,0,0,0,0,0,1});
        tunnelIdBuilder.setMask(new byte[]{0,0,0,0,0,0,0,2});
        tunnelIdCaseBuilder.setTunnelId(tunnelIdBuilder.build());
        entryBuilder.setMatchEntryValue(tunnelIdCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(Ipv6Exthdr.class);
        entryBuilder.setHasMask(true);
        Ipv6ExthdrCaseBuilder ipv6ExthdrCaseBuilder = new Ipv6ExthdrCaseBuilder();
        Ipv6ExthdrBuilder ipv6ExthdrBuilder = new Ipv6ExthdrBuilder();
        ipv6ExthdrBuilder.setPseudoField(new Ipv6ExthdrFlags(true, false, true,
                false, true, false, true, false, true));
        ipv6ExthdrBuilder.setMask(new byte[]{0,2});
        ipv6ExthdrCaseBuilder.setIpv6Exthdr(ipv6ExthdrBuilder.build());
        entryBuilder.setMatchEntryValue(ipv6ExthdrCaseBuilder.build());
        entries.add(entryBuilder.build());
        entryBuilder = new MatchEntryBuilder();
        entryBuilder.setOxmClass(OpenflowBasicClass.class);
        entryBuilder.setOxmMatchField(PacketType.class);
        entryBuilder.setHasMask(false);
        PacketTypeCaseBuilder packetTypeCaseBuilder = new PacketTypeCaseBuilder();
        PacketTypeBuilder packetTypeBuilder = new PacketTypeBuilder();
        packetTypeBuilder.setPacketType(0x1894fL);
        packetTypeCaseBuilder.setPacketType(packetTypeBuilder.build());
        entryBuilder.setMatchEntryValue(packetTypeCaseBuilder.build());
        entries.add(entryBuilder.build());


        builder.setMatchEntry(entries);
        Match match = builder.build();

        ByteBuf out = UnpooledByteBufAllocator.DEFAULT.buffer();
        matchSerializer.serialize(match, out);

        Assert.assertEquals("Wrong match type", 1, out.readUnsignedShort());
        Assert.assertEquals("Wrong match length", 432, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 0, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 42, out.readUnsignedInt());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 43, out.readUnsignedInt());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 5, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 16, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 1L, out.readLong());
        Assert.assertEquals("Wrong match entry mask", 2L, out.readLong());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 7, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 12, out.readUnsignedByte());
        byte[] array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{1,0,3,0,0,6}, array);
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,0,0,5}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 9, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 12, out.readUnsignedByte());
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{4,0,2,0,0,8}, array);
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,0,0,2}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 10, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 46, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 13, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 4141, out.readUnsignedShort());
        array = new byte[2];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,9}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 14, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 14, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 16, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 48, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 18, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 49, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 20, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 50, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 23, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 8, out.readUnsignedByte());
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{10,0,0,1}, array);
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,14}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 25, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 8, out.readUnsignedByte());
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{10,0,0,2}, array);
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,15}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 26, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6653, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 28, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6654, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 30, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6655, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 32, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6656, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 34, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6657, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 36, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 6658, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 38, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 51, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 40, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 52, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 42, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 2, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 53, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 45, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 8, out.readUnsignedByte());
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{10,0,0,4}, array);
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,16}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 47, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 8, out.readUnsignedByte());
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{10,0,0,5}, array);
        array = new byte[4];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,17}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 49, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 12, out.readUnsignedByte());
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,1,2,3,4,5}, array);
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,4,0,0,6}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 51, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 12, out.readUnsignedByte());
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,0,0,0,0,3}, array);
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,6,0,0,4}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 53, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 32, out.readUnsignedByte());
        array = new byte[16];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, array);
        array = new byte[16];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 55, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 32, out.readUnsignedByte());
        array = new byte[16];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1}, array);
        array = new byte[16];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 56, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte()); //8, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 58, out.readUnsignedInt());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 58, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 59, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 60, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 60, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 62, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 16, out.readUnsignedByte());
        array = new byte[16];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 64, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 6, out.readUnsignedByte());
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{1,0,3,0,0,6}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 66, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 6, out.readUnsignedByte());
        array = new byte[6];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{4,0,2,0,0,8}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 68, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 61, out.readUnsignedInt());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 70, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 62, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 72, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 1, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 75, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 6, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 64, out.readUnsignedMedium());
        array = new byte[3];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry mask", new byte[]{0,1,2}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 77, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 16, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 1L, out.readLong());
        Assert.assertEquals("Wrong match entry mask", 2L, out.readLong());
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 79, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 358, out.readUnsignedShort());
        array = new byte[2];
        out.readBytes(array);
        Assert.assertArrayEquals("Wrong match entry value", new byte[]{0,2}, array);
        Assert.assertEquals("Wrong match entry class", 0x8000, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry field & hasMask", 0x58, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry length", 4, out.readUnsignedByte());
        Assert.assertEquals("Wrong match entry value", 1, out.readUnsignedShort());
        Assert.assertEquals("Wrong match entry mask", 0x894f, out.readUnsignedShort());
        Assert.assertTrue("Wrong padding", out.readableBytes() == 0);
    }

}
