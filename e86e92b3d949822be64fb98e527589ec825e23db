{
  "comments": [
    {
      "key": {
        "uuid": "ba1f61a0_2734fffa",
        "filename": "openflowplugin-impl/src/main/java/org/opendaylight/openflowplugin/impl/lifecycle/ContextChainImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 89,
      "author": {
        "id": 65
      },
      "writtenOn": "2017-09-05T19:25:38Z",
      "side": 0,
      "message": "removing this code won\u0027t cleanup the Device/Statistics/RPC context (like unregistering rpcs). did you move this to somewhere else? I see you added some code in close() to cleanup, but that\u0027s not the same as closeServiceInstance(). We need to do the cleanup whenever ownership changes to slave and not when device disconnect.",
      "revId": "e86e92b3d949822be64fb98e527589ec825e23db",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_89cdf5b9",
        "filename": "openflowplugin-impl/src/main/java/org/opendaylight/openflowplugin/impl/lifecycle/ContextChainImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 89,
      "author": {
        "id": 65
      },
      "writtenOn": "2017-09-08T07:24:19Z",
      "side": 0,
      "message": "i am not sure the code that you removed is the cause of performance regression, because it does not do any heavy activity as such. The only heavy processing that is happening in this method is onSlaveRoleAcquired(), because it tries to set the role etc. \n\nDO you see any other scenario where closeServiceInstance() will be called, except when the node disconnect. I was thinking if it can happen in case of network partition and cluster split  happens, but in that case also it won\u0027t call closeServiceInstance to the controller that is in single node cluster. So if there is no other event when this closeServiceInstance will be called, why are we trying to set the onSlaveRoleAcquired() here? If we see any scenario, where closeServiceInstance() can be called, even when device is connected, then i think as a safe approach, we should check the connect state first and if that\u0027s WORKIGN, then we should call onSlaveRoleAcquired() and do the remaining clean, because that you will require, because close() won\u0027t be called in that case.",
      "parentUuid": "ba1f61a0_1bb952cc",
      "revId": "e86e92b3d949822be64fb98e527589ec825e23db",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_49e49de0",
        "filename": "openflowplugin-impl/src/main/java/org/opendaylight/openflowplugin/impl/lifecycle/ContextChainImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 89,
      "author": {
        "id": 7941
      },
      "writtenOn": "2019-11-15T19:11:55Z",
      "side": 0,
      "message": "The onSlaveRoleAcquired will not send SLAVE to device, it will just change ContextChainImpl state to WORKING_SLAVE, that\u0027s all. But it looks like that removing this logic do not solves the performance issue based on Luis\u0027s tests, so I can probably abandon this patch.",
      "parentUuid": "ba1f61a0_89cdf5b9",
      "revId": "e86e92b3d949822be64fb98e527589ec825e23db",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1f61a0_1bb952cc",
        "filename": "openflowplugin-impl/src/main/java/org/opendaylight/openflowplugin/impl/lifecycle/ContextChainImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 89,
      "author": {
        "id": 7941
      },
      "writtenOn": "2019-11-15T19:11:55Z",
      "side": 0,
      "message": "Based on performance regression, this is likely cause of it, before, we do not had any logic in this method, so cluster singleton service was fast when closing OpenFlowPlugin registered service. CSIT tests looks fine, so I think disconnect events and timeouts are enough to cleanup contexts.",
      "parentUuid": "ba1f61a0_2734fffa",
      "revId": "e86e92b3d949822be64fb98e527589ec825e23db",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}