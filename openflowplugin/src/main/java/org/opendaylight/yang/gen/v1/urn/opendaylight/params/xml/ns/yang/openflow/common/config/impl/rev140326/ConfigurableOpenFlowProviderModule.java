/**
* Generated file

* Generated from: yang module name: openflow-provider-impl  yang module local name: openflow-provider-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Wed Apr 02 16:59:36 PDT 2014
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.openflow.common.config.impl.rev140326;

import java.util.Collection;
import org.opendaylight.controller.config.api.osgi.WaitingServiceTracker;
import org.opendaylight.controller.md.sal.binding.api.DataBroker;
import org.opendaylight.controller.md.sal.common.api.clustering.EntityOwnershipService;
import org.opendaylight.controller.sal.binding.api.NotificationProviderService;
import org.opendaylight.controller.sal.binding.api.RpcProviderRegistry;
import org.opendaylight.openflowjava.protocol.spi.connection.SwitchConnectionProvider;
import org.opendaylight.openflowplugin.api.openflow.statistics.MessageCountDumper;
import org.opendaylight.openflowplugin.extension.api.ExtensionConverterRegistrator;
import org.opendaylight.openflowplugin.openflow.md.core.sal.OpenflowPluginProvider;
import org.osgi.framework.BundleContext;

/**
 * @deprecated Replaced by blueprint wiring
 */
@Deprecated
public final class ConfigurableOpenFlowProviderModule extends org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.openflow.common.config.impl.rev140326.AbstractConfigurableOpenFlowProviderModule {

    private BundleContext bundleContext;

    /**
     * @param identifier module identifier
     * @param dependencyResolver dependency resolver
     */
    public ConfigurableOpenFlowProviderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    /**
     * @param identifier module identifier
     * @param dependencyResolver dependency resolver
     * @param oldModule old module
     * @param oldInstance old instance
     */
    public ConfigurableOpenFlowProviderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
            ConfigurableOpenFlowProviderModule oldModule, java.lang.AutoCloseable oldInstance) {

        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    protected void customValidation() {
        // Add custom validation for module attributes here.
    }

    @Override
    public AutoCloseable createInstance() {
        // The service is provided via blueprint so wait for and return it here for backwards compatibility.
        String typeFilter = String.format("(type=%s)", getIdentifier().getInstanceName());
        final WaitingServiceTracker<OpenflowPluginProvider> tracker = WaitingServiceTracker.create(
                OpenflowPluginProvider.class, bundleContext, typeFilter);
        final OpenflowPluginProvider actualService = tracker.waitForService(WaitingServiceTracker.FIVE_MINUTES);

        return new OpenflowPluginProvider() {
            @Override
            public void close() {
                // Don't close the actual service as its life cycle is controlled by blueprint.
                tracker.close();
            }

            @Override
            public void initialization() {
                actualService.initialization();
            }

            @Override
            public void setSwitchConnectionProviders(Collection<SwitchConnectionProvider> switchConnectionProvider) {
                actualService.setSwitchConnectionProviders(switchConnectionProvider);
            }

            @Override
            public MessageCountDumper getMessageCountDumper() {
                return actualService.getMessageCountDumper();
            }

            @Override
            public ExtensionConverterRegistrator getExtensionConverterRegistrator() {
                return actualService.getExtensionConverterRegistrator();
            }

            @Override
            public void setRole(OfpRole role) {
                actualService.setRole(role);
            }

            @Override
            public void fireRoleChange(OfpRole newRole) {
                actualService.fireRoleChange(newRole);
            }

            @Override
            public void setDataBroker(DataBroker dataBroker) {
                actualService.setDataBroker(dataBroker);
            }

            @Override
            public void setNotificationService(NotificationProviderService notificationService) {
                actualService.setNotificationService(notificationService);
            }

            @Override
            public void setRpcRegistry(RpcProviderRegistry rpcRegistry) {
                actualService.setRpcRegistry(rpcRegistry);
            }

            @Override
            public void setEntityOwnershipService(EntityOwnershipService entityOwnershipService) {
                actualService.setEntityOwnershipService(entityOwnershipService);
            }
        };
    }

    public void setBundleContext(BundleContext bundleContext) {
        this.bundleContext = bundleContext;
    }

    @Override
    public boolean canReuseInstance(AbstractConfigurableOpenFlowProviderModule oldModule) {
        return true;
    }
}
